plugins {
    id("dev.nanite.mlp") version("0.3.0")
    id("java-library")
    id("maven-publish")
    id("me.modmuss50.mod-publish-plugin") version "0.3.0"
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.0'
}


java.toolchain.languageVersion = JavaLanguageVersion.of(21)

multiLoader.root() {
    minecraftVersion.set(project.property("minecraft_version"))
    modID.set(project.property("mod_id"))
    splitSources.set(true)
    accessWidenerFile.set(project(":common").file("src/main/resources/${mod_id}.accesswidener"))
    convertAccessWidener.set(true)
    group.set(project.property("maven_group"))
    dataGen {
        useNeo.set(project(":common").file("src/generated/resources"))
    }
}

publishMods {
    dryRun = providers.environmentVariable("CURSE_TOKEN").getOrNull() == null
    changelog = file("./CHANGELOG.md").text
    version = "${mod_version}"
    type = STABLE

    def neoOptions = publishOptions {
        file = project.provider { project(":neo").tasks.jar }.flatMap { it.archiveFile }
        displayName = "${project.name} Neo ${mod_version}+mc${minecraft_version}"
        modLoaders.add("neoforge")
    }

    def curseForgeOptions = curseforgeOptions {
        accessToken = providers.environmentVariable("CURSE_TOKEN")
        projectId = "${curse_id}"
        minecraftVersions.add("${minecraft_version}")
        requires {
            slug = "ftb-library-forge"
            slug = "trenzalore"
        }
    }

    curseforge("curseforgeNeoForge") {
        from(curseForgeOptions, neoOptions)
    }

}